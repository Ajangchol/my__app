/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LabTestBookingService } from "../labTestBooking.service";
import { LabTestBookingCreateInput } from "./LabTestBookingCreateInput";
import { LabTestBooking } from "./LabTestBooking";
import { LabTestBookingFindManyArgs } from "./LabTestBookingFindManyArgs";
import { LabTestBookingWhereUniqueInput } from "./LabTestBookingWhereUniqueInput";
import { LabTestBookingUpdateInput } from "./LabTestBookingUpdateInput";

export class LabTestBookingControllerBase {
  constructor(protected readonly service: LabTestBookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LabTestBooking })
  async createLabTestBooking(
    @common.Body() data: LabTestBookingCreateInput
  ): Promise<LabTestBooking> {
    return await this.service.createLabTestBooking({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LabTestBooking] })
  @ApiNestedQuery(LabTestBookingFindManyArgs)
  async labTestBookings(
    @common.Req() request: Request
  ): Promise<LabTestBooking[]> {
    const args = plainToClass(LabTestBookingFindManyArgs, request.query);
    return this.service.labTestBookings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LabTestBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async labTestBooking(
    @common.Param() params: LabTestBookingWhereUniqueInput
  ): Promise<LabTestBooking | null> {
    const result = await this.service.labTestBooking({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LabTestBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLabTestBooking(
    @common.Param() params: LabTestBookingWhereUniqueInput,
    @common.Body() data: LabTestBookingUpdateInput
  ): Promise<LabTestBooking | null> {
    try {
      return await this.service.updateLabTestBooking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LabTestBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLabTestBooking(
    @common.Param() params: LabTestBookingWhereUniqueInput
  ): Promise<LabTestBooking | null> {
    try {
      return await this.service.deleteLabTestBooking({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
