/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LabTestBooking as PrismaLabTestBooking } from "@prisma/client";

export class LabTestBookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LabTestBookingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.labTestBooking.count(args);
  }

  async labTestBookings(
    args: Prisma.LabTestBookingFindManyArgs
  ): Promise<PrismaLabTestBooking[]> {
    return this.prisma.labTestBooking.findMany(args);
  }
  async labTestBooking(
    args: Prisma.LabTestBookingFindUniqueArgs
  ): Promise<PrismaLabTestBooking | null> {
    return this.prisma.labTestBooking.findUnique(args);
  }
  async createLabTestBooking(
    args: Prisma.LabTestBookingCreateArgs
  ): Promise<PrismaLabTestBooking> {
    return this.prisma.labTestBooking.create(args);
  }
  async updateLabTestBooking(
    args: Prisma.LabTestBookingUpdateArgs
  ): Promise<PrismaLabTestBooking> {
    return this.prisma.labTestBooking.update(args);
  }
  async deleteLabTestBooking(
    args: Prisma.LabTestBookingDeleteArgs
  ): Promise<PrismaLabTestBooking> {
    return this.prisma.labTestBooking.delete(args);
  }
}
